
import threading
import textwrap
from tkinter import *
import tkinter.ttk as ttk
import tkcalendar
from bs4 import BeautifulSoup
import requests
from datetime import datetime, timedelta

class App():
    
    def __init__(self, master):
        
        self.master = master
        root.title("Crypto Monitor")
        frm = Frame(master, padx = 10, pady = 10)
        frm.pack()
        
        self.out= ['Bitcoin', 'Ethereum', 'XRP', 'Bitcoin Cash','Litecoin']
        
        self.amount = StringVar()
        self.nombrecrypto = StringVar()
        
        self.lblfrmToken = ttk.LabelFrame(frm, text = "Token",width = 500)
        self.lblfrmToken.grid(row = 0, column = 0, pady = 5)
        
        self.lblfrmRangofecha = ttk.LabelFrame(frm, text = "Rango Fecha",width = 500)
        self.lblfrmRangofecha.grid(row = 1, column = 0, pady = 5)
        
        self.lblfrmTablas = ttk.LabelFrame(frm, text = "Tablas y Graficos",width = 500)
        self.lblfrmTablas.grid(row = 2, column = 0, pady = 5)
        #-----------------LBLFRM1------------------------------------
        self.cboCrypt = ttk.Combobox(self.lblfrmToken, values = self.out, textvariable = self.nombrecrypto)
        self.cboCrypt.grid(row = 0, column = 0,padx = 10, pady = 10)
        
        self.lblEquiv = Label(self.lblfrmToken, font = "Arial 16 bold", fg = "red", textvariable = self.amount)
        self.lblEquiv.grid(row = 0, column = 1,padx = 10, pady = 10)

        #-----------------LBLFRM2------------------------------------
        
        self.date_entry1 = tkcalendar.DateEntry(self.lblfrmRangofecha)
        self.date_entry1.grid(row = 0, column = 0, padx = 4, pady = 4)
        
        self.date_entry2 = tkcalendar.DateEntry(self.lblfrmRangofecha)
        self.date_entry2.grid(row = 0, column = 1, padx = 4, pady = 4)
        
        self.btnAsignar = Button(self.lblfrmRangofecha, text = "Asignar", width = 12,command = self.printfinal)
        self.btnAsignar.grid(row = 0, column = 2, padx = 5, pady = 3)
        
        
        #-----------------LBLFRM3------------------------------------
        
        self.Notebook = ttk.Notebook(self.lblfrmTablas)
        self.Notebook.pack()
        self.canvastext = Canvas(self.Notebook, width = 330, height = 220, bg = 'white')
        self.Notebook.add(self.canvastext, text = "Info")
        
        #----------------Binds-------------------------------------
        self.cboCrypt.bind("<<ComboboxSelected>>", self.get_amount)
        
        
        
        #---------------Config-------------------------------------
        
        self.amount.set('0,000.00 USD')
        self.date_entry2.set_date(datetime.now())
        self.date_entry1.set_date(datetime.now() - timedelta(days =7 ))
    
    def printfinal(self):
        if self.nombrecrypto.get() == "Bitcoin":
            print("Bitcoin", self.date_entry1.get(), self.date_entry2.get())

           
        elif self.nombrecrypto.get() == "Ethereum":
            print("Ethereum", self.date_entry1.get(), self.date_entry2.get())
            
        elif self.nombrecrypto.get() == "XRP":
            
            print("XRP", self.date_entry1.get(), self.date_entry2.get())
            
        elif self.nombrecrypto.get() == "Bitcoin Cash":
            
            print("Bitcoin Cash", self.date_entry1.get(), self.date_entry2.get())
           
        elif self.nombrecrypto.get() == "Litecoin":
            
            print("Litecoin", self.date_entry1.get(), self.date_entry2.get())

        
    
    def get_amount(self, handle):
        
        if self.nombrecrypto.get() == "Bitcoin":
            
        
           
           self.urlc = "https://api.coinbase.com/v2/prices/BTC-USD/spot"
           self.req = requests.get(self.urlc)
           self.data = self.req.json()
           self.amount.set(self.data['data']['amount'] + " USD")
             
           self.urlinfo = "https://coinmarketcap.com/currencies/bitcoin/"
           self.req2 = requests.get(self.urlinfo)

           self.soup = BeautifulSoup(self.req2.text, 'lxml')
    
           self.text = self.soup.find('div', class_="col-sm-8").text   

           self.my_wrap = textwrap.TextWrapper(width=60)
           self.my_text_wrap = self.my_wrap.wrap(self.text)
           
           self.new_text = "\n".join(self.my_text_wrap)
           
           self.canvastext.delete("all")
           self.canvastext.create_text(155,80,font="Arial 8", text=self.new_text)
           

           
        elif self.nombrecrypto.get() == "Ethereum":
            
           self.urlc = "https://api.coinbase.com/v2/prices/ETH-USD/spot"
           self.req = requests.get(self.urlc)
           self.data = self.req.json()
           self.amount.set(self.data['data']['amount'] + " USD")
           
           self.urlinfo = "https://coinmarketcap.com/currencies/ethereum/"
           self.req2 = requests.get(self.urlinfo)

           self.soup = BeautifulSoup(self.req2.text, 'lxml')
    
           self.text = self.soup.find('div', class_="col-sm-8").text   

           self.my_wrap = textwrap.TextWrapper(width=60)
           self.my_text_wrap = self.my_wrap.wrap(self.text)
           
           self.new_text = "\n".join(self.my_text_wrap)
           
           self.canvastext.delete("all")
           self.canvastext.create_text(155,110,font="Arial 8", text=self.new_text)
          
           
        elif self.nombrecrypto.get() == "XRP":
            
           self.urlc = "https://api.coinbase.com/v2/prices/XRP-USD/spot"
           self.req = requests.get(self.urlc)
           self.data = self.req.json()
           self.amount.set(self.data['data']['amount'] + " USD")
           
           self.urlinfo = "https://coinmarketcap.com/currencies/ripple/"
           self.req2 = requests.get(self.urlinfo)

           self.soup = BeautifulSoup(self.req2.text, 'lxml')
    
           self.text = self.soup.find('div', class_="col-sm-8").text   

           self.my_wrap = textwrap.TextWrapper(width=60)
           self.my_text_wrap = self.my_wrap.wrap(self.text)
           
           self.new_text = "\n".join(self.my_text_wrap)
           
           self.canvastext.delete("all")
           self.canvastext.create_text(155,60,font="Arial 8", text=self.new_text)
          
           
        elif self.nombrecrypto.get() == "Bitcoin Cash":
            
           self.urlc = "https://api.coinbase.com/v2/prices/BCH-USD/spot"
           self.req = requests.get(self.urlc)
           self.data = self.req.json()
           self.amount.set(self.data['data']['amount'] + " USD")
           
           self.urlinfo = "https://coinmarketcap.com/currencies/bitcoin-cash/"
           self.req2 = requests.get(self.urlinfo)

           self.soup = BeautifulSoup(self.req2.text, 'lxml')
    
           self.text = self.soup.find('div', class_="col-sm-8").text   

           self.my_wrap = textwrap.TextWrapper(width=60)
           self.my_text_wrap = self.my_wrap.wrap(self.text)
           
           self.new_text = "\n".join(self.my_text_wrap)
           
           self.canvastext.delete("all")
           self.canvastext.create_text(165,70,font="Arial 8", text=self.new_text)
           
        elif self.nombrecrypto.get() == "Litecoin":
            
           self.urlc = "https://api.coinbase.com/v2/prices/LTC-USD/spot"
           self.req = requests.get(self.urlc)
           self.data = self.req.json()
           self.amount.set(self.data['data']['amount'] + " USD")
           
           self.urlinfo = "https://coinmarketcap.com/currencies/litecoin/"
           self.req2 = requests.get(self.urlinfo)

           self.soup = BeautifulSoup(self.req2.text, 'lxml')
    
           self.text = self.soup.find('div', class_="col-sm-8").text   

           self.my_wrap = textwrap.TextWrapper(width=60)
           self.my_text_wrap = self.my_wrap.wrap(self.text)
           
           self.new_text = "\n".join(self.my_text_wrap)
           
           self.canvastext.delete("all")
           self.canvastext.create_text(165,50,font="Arial 8", text=self.new_text)
           
           
############################

root = Tk()




app = App(root)
root.mainloop()
