import os
import time
import datetime
import json

'''
Diccionario de contacto
=======================

data = {
        contactos: [
                      {
                      'nombre': None,
                      'apellido': None,
                      'telefono': {
                                  'fijo': None,
                                  'movil': None,
                                  },
                      'email': {
                                'personal': None,
                                'trabajo': None, 
                               }
                      'fecha_nac': None,
                     },
                ]
       }
'''

class Contacto:
    def __init__(self, nombre = "", apellido = "", t_fijo = "", t_movil = "", email_per = "", email_lab = "", fecha_nac = "", edad = ""):
        self.nombre = nombre
        self.apellido = apellido
        self.t_fijo = t_fijo
        self.t_movil = t_movil
        self.email_per = email_per
        self.email_lab = email_lab
        self.fecha_nac = fecha_nac
        self.edad = self.__set_edad()
    
    @property
    def nombre(self):
        return self.__nombre
    
    @nombre.setter
    def nombre(self, val):
        if isinstance(val, str):
            self.__nombre = val
        else:
            raise TypeError("El campo 'nombre' debe ser un 'str'")
            
    @property
    def apellido(self):
        return self.__apellido
    
    @apellido.setter
    def apellido(self, val):
        if isinstance(val, str):
            self.__apellido = val
        else:
            raise TypeError("El campo 'apellido' debe ser un 'str'")
    
    @property
    def t_fijo(self):
        return self.__t_fijo
    
    @t_fijo.setter
    def t_fijo(self, val):
        if isinstance(val, str):
            self.__t_fijo = val
        else:
            raise TypeError("El campo 't_fijo' debe ser un 'str'")
    
    @property
    def t_movil(self):
        return self.__t_movil
    
    @t_movil.setter
    def t_movil(self, val):
        if isinstance(val, str):
            self.__t_movil = val
        else:
            raise TypeError("El campo 't_movil' debe ser un 'str'")
            
    @property
    def email_per(self):
        return self.__email_per
    
    @email_per.setter
    def email_per(self, val):
        if isinstance(val, str):
            self.__email_per = val
        else:
            raise TypeError("El campo 'email_per' debe ser un 'str'")
            
    @property
    def email_lab(self):
        return self.__email_lab
    
    @email_lab.setter
    def email_lab(self, val):
        if isinstance(val, str):
            self.__email_lab = val
        else:
            raise TypeError("El campo 'email_lab' debe ser un 'str'")
    
    @property
    def fecha_nac(self):
        return self.__fecha_nac
    
    @fecha_nac.setter
    def fecha_nac(self, val):
        if isinstance(val, str):
            self.__fecha_nac = val
        else:
            raise TypeError("El campo 'fecha_nac' debe ser un 'str'")
            
    def __set_edad(self):
        
        fecha = datetime.datetime.now()
        anio_act = fecha.year
        mes_act = fecha.month
        dia_act = fecha.day
        dia_nac, mes_nac, anio_nac  = self.fecha_nac.split('/')
        
        if mes_act <= int(mes_nac):
            if dia_act < int (dia_nac):
                return str(anio_act - int(anio_nac) - 1) 
            else:
                return str(anio_act - int(anio_nac))
        else:
            return str(anio_act - int(anio_nac))
        
        
    def __repr__(self):
        str_out = "Contacto:\n"
        str_out += "\tNombre: {}\n".format(self.nombre)
        str_out += "\tApellido: {}\n".format(self.apellido)
        str_out += "\tTelefono Fijo: {}\n".format(self.t_fijo)
        str_out += "\tTelefono Movil: {}\n".format(self.t_movil)
        str_out += "\tEmail Personal: {}\n".format(self.email_per)
        str_out += "\tEmail Laboral: {}\n".format(self.email_lab)
        str_out += "\tFecha de Nacimiento: {}\n".format(self.fecha_nac)
        str_out += "\tEdad: {}\n".format(self.edad)
        return str_out
    

def clear_screen():
    _ = os.system('cls')
    return None


def show_menu():
    clear_screen()
    print("\nAGENDA DE CONTACTOS")
    print("====================")
    print("[1] Agregar contacto")
    print("[2] Mostrar contactos")
    print("[3] Ver detalle de contactos")
    print("[4] Editar contacto")
    print("[5] Borrar contacto")
    print("[0] Salir")
    opc = int(input("\nOpcion: "))
    
    return opc


def read_file(file):
    '''
    Esta funcion lee un archivo json con la informacion de los contactos
    registrados y retorna una lista con objetos Contacto
    '''
    
    out = []
    
    with open(file) as json_file:
        data = json.load(json_file)
    
    for cont in data['contactos']:
        out.append(Contacto(str(cont['nombre']),str(cont['apellido']),str(cont['telefono']['fijo']),str(cont['telefono']['movil']),
                            str(cont['email']['personal']),str(cont['email']['trabajo']),str(cont['fecha_nac'])))
        
    return out


def write_file(file, contact_list):
    '''
    Esta funcion crear un diccionario con la informacion de la lista de 
    contactos (con objetos Contacto) y escribe un archivo json con la
    informacion del diccionario
    '''
    data = dict(contactos=[])
    
    for i in contact_list:
        data['contactos'].append({'nombre': i.nombre,
                            'apellido': i.apellido,
                            'edad': i.edad,
                            'telefono':{'fijo':i.t_fijo,'movil':i.t_movil},
                            'email':{'personal':i.email_per,'movil':i.email_lab},
                            'fecha_nac':i.fecha_nac
                            })
    


def find_contact(contact_list, name_str):
    '''
    Esta funcion busca en una lista de contactos (con objetos Contactos)
    un contacto especificado por nombre
    '''
    found = False
    
    for con in contact_list:
        if name_str.lower() in con.nombre.lower():
            found = True
            return con
            
        
        
    if not found:
        print("No se han encontrado contactos con el nombre anterior")
            


def edit_contact(contact_obj):
    '''
    Funcion que cambia los cambios de un objeto Contacto
    '''
    valor = input("Nombre [{}] : ".format(contact_obj.nombre))
    if valor != "-":
        contact_obj.nombre = valor
                
    valor = input("Apellido [{}] : ".format(contact_obj.apellido))
    if valor != "-":
        contact_obj.apellido = valor
                
    valor = input("Teléfono fijo [{}] : ".format(contact_obj.t_fijo))
    if valor != "-":
        contact_obj.t_fijo = valor
                
    valor = input("Teléfono móvil [{}] : ".format(contact_obj.t_movil))
    if valor != "-":
        contact_obj.t_movil = valor
                
    valor = input("Email personal [{}] : ".format(contact_obj.email_per))
    if valor != "-":
        contact_obj.email_per = valor
                
    valor = input("Email laboral [{}] : ".format(contact_obj.email_lab))
    if valor != "-":
        contact_obj.email_lab = valor
                
    valor = input("Fecha de nacimiento [{}] : ".format(contact_obj.fecha_nac))
    if valor != "-":
        contact_obj.fecha_nac = valor
    print ()
    print(" Los nuevos datos del contacto son : " )
    print ()
    
    print(contact_obj)
    time.sleep(4)


def delete_contact(contact_list):
    '''
    Funcion que elimina un objeto Contacto de una lista de objetos Contactos
    '''
    enomb, eapell = input("Ingrese el nombre del contacto a borrar: ").split()
    
    for contacto in contact_list:
        if contacto.nombre == enomb and contacto.apellido == eapell:
            contact_list.remove(contacto)
    
    time.sleep(1)
    print("El contacto fue borrado exitosamente.")
    time.sleep(2)


def show_contact(contact):
    '''
    Funcion que muestra los detalles de un objeto Contacto <print(obj)>
    '''
    print(contact)
    time.sleep(4)

def list_contact(contact_list):
    '''
    Funcion que muestra un listado de contactos numerados con la informacion
    de nombre y apellido en ordenado de forma alfabetica
    '''
    
    prov = []
    
    for person in contact_list:
        nombre = person.nombre + " " + person.apellido
        prov.append(nombre)
        prov.sort()
        
    print("Lista de Contactos:")
    print("===============================")
     
    for idx, element in enumerate(prov,1):  
        print(f"{idx:2}. {element}")
        

def salir():
    '''
    Funcion que pide al usuario confirmacion para salir. Retorrna un boolean.
    '''
    y_n = input("\nSeguro desea salir? [Si/No]: ")
    
    if y_n[0].upper() == "S":
        return True
    else:
        return False

def main():
    
    lista = read_file('contactos.json')
    while True:
        opc = show_menu()
        if opc in [1, 2, 3, 4, 5]:
            print("\nSelecciono la opcion", opc)
            time.sleep(1)
            
            if opc is 2:
                list_contact(lista)
                time.sleep(5)
                
            elif opc is 3:
                search = input("Ingrese el nombre del contacto a buscar: ")
                usuario = find_contact(lista,search)
                show_contact(usuario)
                
                
            elif opc is 4: 
                clear_screen()
                
                list_contact (lista)
                print ()
                numero = int(input ("Ingrese el numero del contacto a editar : "))
                
                print ()
                prov = []
                for person in lista:
                    nombre = person.nombre + " " + person.apellido
                    prov.append(nombre)
                    prov.sort()
    
                name , apell = prov[numero-1].split()

                print (" ingrese '-' para no modificar el dato.")
                print ()
                cuenta = 0

                for contacto in lista:
                    if contacto.nombre == name and contacto.apellido == apell:
                        salida = cuenta
                    else: 
                        cuenta += 1
                edit_contact(lista[salida])
                
                
            elif opc is 5 : 
                delete_contact(lista)
                
        elif opc == 0:
            if salir():
                break
        else:
            print("\nLa opcion ingresada no es valida")


if __name__ == '__main__':
    main()

 
